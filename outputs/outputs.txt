> Oi!
> 0 (iguais)
> 10 (tamanho do array, não da string)
> nao (isdigit() verifica se é número)
> CES (concatena só 2 caracteres)
> 5 (último caractere)
> 8192 (isspace() verifica espaço em branco, não retorna 0)
> b (ponteiro para o segundo caractere)
> code (array de chars sem '\0' funciona aqui, mas não é a solução mais elegante)
> nana (strchr retorna ponteiro para a primeira ocorrência)
> A (acesso direto ao caractere)
> 7 (função simples de soma)
> 6 (incrementa via ponteiro)
> 1 2 (static mantém valor entre chamadas)
> 3 (show imprime 3, mas main não imprime nada)
> 13 (soma usa x global)
> ok (x é local a foo)
> 24 (fatorial de 4)
> 7 (maior entre 2 e 7)
> 3 (ponteiro para função)
> 2 (acesso a membro da struct)
> 01:02 (formatação com zeros à esquerda)
> A (mesmo espaço na union)
> 25.5 (acesso ao membro float)
> 3 (enum começa em 1)
> 5 (inicialização designada)
> 0x0 (ponteiro nulo)
> 2 (enum incrementa automaticamente)
> 6 (inc recebe endereço de x e incrementa via ponteiro)
> 2 1 (variável static mantém valor; ordem de avaliação indefinida, geralmente direita-esquerda)
> ERROR! (erro: uso inválido de expressão void)
> 24 (função recursiva calcula fatorial de 4)
> 7 (função max retorna o maior entre dois valores)
> 3 (ponteiro para função chama add com argumentos 1 e 2)
> 2 (acessa membro y da struct Point)
> A (union compartilha memória; 65 interpretado como char ASCII 'A')
> 25.5 (union com membro float definido e impresso)
> 	 (TAB é constante enum com valor \t)
> 5 (struct inicializada com membro a = 5)
> 0x0 ou (nil) (ponteiro NULL impresso com %p)
> 8 (padding da struct: char(1) + padding(3) + int(4) = 8 bytes)
> 15 (ponteiro p aponta para a; *p = *p + b equivale a a = a + b = 5 + 10)
> 4 (p+1 aponta para v[1], que contém 4)
> 0x7ffc... 10 (endereço de x e seu valor 10)
> 7 7 (*q pega valor de b(7) e atribui a *p(a); b fica inalterado)
> F (p+2 aponta para o terceiro caractere da string)
